name: Stratosphere Container Web App
on:
  repository_dispatch:
    types: create_stratosphere_container_web
jobs:
  create-container-web-app:      
    runs-on: ubuntu-latest
    timeout-minutes: 20
    env:
      JDA_REGISTRY: https://jdasoftware.jfrog.io/jdasoftware/api/npm/npm/
      GITHUB_REPO_NAME: "${{ github.event.client_payload.strato.repo }}"
      AZURE_CONTAINER_WEB_APP_TYPE: "${{ github.event.client_payload.app_type }}"
      ALM_SPN_USERNAME: "${{ github.event.client_payload.strato.alm_spn_username }}"
      ALM_SPN_PASSWORD: "${{ github.event.client_payload.strato.alm_spn_password }}"
      ARTIFACTORY_AUTH: "${{ github.event.client_payload.strato.artifactory_auth }}"
      AZURE_TENANT_ID: "${{ github.event.client_payload.tenant_id }}"
      AZURE_ACR_NAME: 'almacr'
      AZURE_ACR_RESOURCE_NAME: 'ooo55fn7bu5d3fc0fwrszk99'
      STRATOSPHERE_API_URL: https://api.live.external.byp.ai
      GEOGRAPHY: "${{ github.event.client_payload.geography }}"
      STRATOSPHERE_ACCESS_TOKEN: "${{ github.event.client_payload.strato.stratospher_access_token }}"
      AZURE_CONTAINER_WEB_APP_NAME: "${{ github.event.client_payload.strato.container_web_app_name }}"
    steps:
    - name: add mask
      run: | 
        echo "::add-mask::${{ env.ALM_SPN_USERNAME }}"
        echo "::add-mask::${{ env.ALM_SPN_PASSWORD }}"
        
    - name: Set env
      run: |
        echo "AZURE_CONTAINER_WEB_APP_IMAGE_NAME=${AZURE_CONTAINER_WEB_APP_NAME}" >> $GITHUB_ENV
    
    - name: Checkout Code
      uses: actions/checkout@v2

    - name: Login to Azure
      run: |
        az login \
          --service-principal \
          --username "${{ env.ALM_SPN_USERNAME }}" \
          --password "${{ env.ALM_SPN_PASSWORD }}" \
          --allow-no-subscriptions \
          --tenant "jdadelivers.onmicrosoft.com"
   
    - name: Get Timestamp
      id: time
      run: |
        echo "AZURE_WEB_APP_IMAGE_TAG=$(date '+%Y-%m-%d-%H-%M-%S')" >> $GITHUB_ENV
            
    - name: Build Docker Image
      run: |
        sudo docker build . --file ".github/docker/Dockerfile_$AZURE_CONTAINER_WEB_APP_TYPE" --tag "$AZURE_ACR_RESOURCE_NAME.azurecr.io/$AZURE_CONTAINER_WEB_APP_IMAGE_NAME:$AZURE_WEB_APP_IMAGE_TAG" \
        --build-arg JDA_REGISTRY=${{ env.JDA_REGISTRY }} \
        --build-arg ARTIFACTORY_AUTH=${{ env.ARTIFACTORY_AUTH }}
        
    - name: Tag Docker Image
      run: |
        sudo docker tag $AZURE_ACR_RESOURCE_NAME.azurecr.io/$AZURE_CONTAINER_WEB_APP_IMAGE_NAME:$AZURE_WEB_APP_IMAGE_TAG $AZURE_ACR_RESOURCE_NAME.azurecr.io/$AZURE_CONTAINER_WEB_APP_IMAGE_NAME:latest 
    
    - name: Login to ACR
      run: |
        az acr login --name $AZURE_ACR_RESOURCE_NAME
    
    - name: Push Docker Images
      run: |
        docker push "$AZURE_ACR_RESOURCE_NAME.azurecr.io/$AZURE_CONTAINER_WEB_APP_IMAGE_NAME:$AZURE_WEB_APP_IMAGE_TAG"
        docker push "$AZURE_ACR_RESOURCE_NAME.azurecr.io/$AZURE_CONTAINER_WEB_APP_IMAGE_NAME:latest"
    
    - name: Create Stratosphere Container Web
      run: |
        curl -H "accept: application/json" \
          -H "Content-Type: application/json" \
          -H "Authorization: Bearer ${{ env.STRATOSPHERE_ACCESS_TOKEN }}" \
          --request PUT \
          --data '{"spec": {"liveness_probe": {"initial_delay_seconds": 180,"path": "/"},"enabled": true,"image": '\"${{ env.AZURE_ACR_RESOURCE_NAME }}.azurecr.io/${{ env.AZURE_CONTAINER_WEB_APP_IMAGE_NAME }}:${{ env.AZURE_WEB_APP_IMAGE_TAG }}\"',"network": {"access": "external"},"authentication": {"enabled": true}}}' \
          ${{ env.STRATOSPHERE_API_URL }}/geographies/${{ env.GEOGRAPHY }}/projects/alm/resources/container-web/${{ env.AZURE_CONTAINER_WEB_APP_NAME }}